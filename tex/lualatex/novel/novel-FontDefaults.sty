%%
%% This is file `novel-FontDefaults.sty', part of class `novel'.
%% Copyright 2017 Robert Allgeyer.
%%
%% 
%% This file may be distributed and/or modified under the
%% conditions of the LaTeX Project Public License, either version 1.3c
%% of this license or (at your option) any later version.
%% The latest version of this license is in
%%    http://www.latex-project.org/lppl.txt
%% and version 1.3c or later is part of all distributions of LaTeX
%% version 2005/12/01 or later.
%% 
%%
\ProvidesFile{novel-FontDefaults.sty}%
[2017/12/09 v1.46.3d LaTeX file (default fonts)]
%%


%%
%% This file is loaded \AtEndPreamble.
%%

%%%%%

%% Most TeX installations will use Latin Modern or Computer Modern
%%   as default fonts. These are unsuitable for commercial fiction.
%% But `novel' class uses Libertinus as defaults.
%% Change them using \SetParentFont and other fontspec commands, in Preamble.
% Libertinus Serif has Regular, Italic, Bold, Bold Italic.
%   But here, Semibold over-rides Bold.
%
%% Now to activate the font definitions:
%% The parent font, ancestor of the main font, and some others:
\if@parentfontset\else % fixed in v. 1.43.1
  \ifthenelse{\equal{\rmdefault}{lmr}}{%
    % At this point, if \rmdefault is lmr, it means that the user did not choose
    %   a different font. Then, Libertinus Serif or Latin Modern Roman
    %   will be automatically set as \rmdefault:
    \IfFontExistsTF{Libertinus Serif}{ % preferred default
      \SetParentFont[%
        BoldFont=libertinusserif-semibold.otf,%
        BoldItalicFont=libertinusserif-semibolditalic.otf,%
      ]{Libertinus Serif}
    }{ % backup default:
      \SetParentFont[%
        SmallCapsFont={Latin Modern Roman Caps}%
        ]{Latin Modern Roman}% only because it comes with LaTeX
      \let\scshape\oldscshape % or small caps won't work
      \let\smcp\oldscshape % ditto
    }%
  }{% However, if \rmdefault is not lmr, it means that the user chose the font.
    % If the choice was made via \SetParentFont, no problem. But if done by
    %   incorrect method such as \setmainfont, \renewcommand\rmdefault,
    %   or \usepackage{fontname}, then an error is thrown (warning prior to v 1.44):
    \if@parentfontset\else
      \ClassError{novel}{Wrong command used to set main font}%
      {You attempted to define the main document font using a command such as^^J%
      \string\renewcommand\string\rmdefault\space or \string\usepackage^^J%
      or \string\setmainfont. These are incorrect in `novel' class.^^J%
      Use \string\SetParentFont\space instead. See `novel' documentation.^^J}%
    \fi
  }%
\fi
% Now we are ready to set the main font:
\setmainfont[\parentfontfeatures]{\parentfontname}
\let\mainfont\rmfamily\relax % compatibility
%%

% The mono font:
\ifthenelse{\equal{\ttdefault}{lmtt}}{% over-ride:
  \IfFontExistsTF{Libertinus Mono}{
    \setmonofont[%
      ItalicFont={},% Doesn't have these.
      BoldFont={},%
      BoldItalicFont={},%
    ]{Libertinus Mono}
  }{
    \setmonofont{Latin Modern Mono}% Eeek! Only because you have it!
  }
}{} % User \setmonofont, so leave alone.
%%
% The sans font:
\ifthenelse{\equal{\sfdefault}{lmss}}{ % override:
  \IfFontExistsTF{Libertinus Sans}{
    \setsansfont{Libertinus Sans}
  }{
    \setsansfont{Latin Modern Sans}% Eeek! Only because you have it!
  }
}{} % User \setsansfont, so leave alone.
%%

%%
% New in version 1.38, \straightquote and \straightdblquote:
\gdef\straightquote{{\addfontfeature{Ligatures=ResetAll}'}}
\gdef\straightdblquote{{\addfontfeature{Ligatures=ResetAll}"}}
%%

%% The novel-specific fonts:
\if@chapterfontset\else
  \SetChapterFont[\parentfontfeatures,Scale=1.6]{\parentfontname}
\fi
\newfontfamily\chapterfont[\@chapterfontfeatures]{\@chapterfontname}
%%
\if@subchfontset\else
  \SetSubchFont[\parentfontfeatures,Scale=1.2]{\parentfontname}
\fi
\newfontfamily\subchfont[\@subchfontfeatures]{\@subchfontname}
%%
\newif \if@headfontdefault
\if@headfontset\else
  \SetHeadFont[Letters=SmallCaps,\parentfontfeatures,Scale=0.92]{\parentfontname}
  \global\@headfontdefaulttrue
\fi
\newfontfamily\headfont[\@headfontfeatures]{\@headfontname}
%%
%% The decofont must be NovelDeco.otf or a user modification of that font:
\if@decofontset\else
  \IfFontExistsTF{NovelDeco.otf}{
    \SetDecoFont{NovelDeco}
  }{}
\fi
%%
\gdef\acronym#1{#1}% Re-defined below, if decofont available.
%%
%% Now to get the decofont activated:
% Decorative glyphs, only in this font. Should not be re-set by user:
\gdef\decoglyph#1{~}% If decofont not found, nonbreaking space in main text.
%
\if@gotdeco % NovelDeco or a user-defined alternative was found:
  \newfontface\@decoglyph[%
    \@decofontfeatures,%
  ]{\@decofontname}
  \newfontface\@decoglypha[%
    \@decofontfeatures,RawFeature=+ss01,%
  ]{\@decofontname}
  \newfontface\@decoglyphb[%
    \@decofontfeatures,RawFeature=+ss02,%
  ]{\@decofontname}
  \newfontface\@decoglyphc[%
    \@decofontfeatures,RawFeature=+ss03,%
  ]{\@decofontname}
  %
  \gdef\decoglyph#1{% Be sure to use % without preceding space:
    \IfBeginWith{#1}{n}{% normal weight symbol (same as regular)
     \StrBehind{#1}{n}[\@tempdecoglyph]{\@decoglyph\symbol{\@tempdecoglyph}}%
    }{}%
    \IfBeginWith{#1}{r}{% regular weight symbol
     \StrBehind{#1}{r}[\@tempdecoglyph]{\@decoglyph\symbol{\@tempdecoglyph}}%
    }{}%
    \IfBeginWith{#1}{l}{% light weight symbol
    \StrBehind{#1}{l}[\@tempdecoglyph]{\@decoglypha\symbol{\@tempdecoglyph}}%
    }{}%
    \IfBeginWith{#1}{e}{% extra light weight symbol
    \StrBehind{#1}{e}[\@tempdecoglyph]{\@decoglyphb\symbol{\@tempdecoglyph}}%
    }{}%
    \IfBeginWith{#1}{t}{% thin weight symbol
    \StrBehind{#1}{t}[\@tempdecoglyph]{\@decoglyphc\symbol{\@tempdecoglyph}}%
    }{}%
  }% end gdef decoglyph
  %
  % The trouble with acronyms is that they look too big in regular capitals,
  % and too small in small caps. Command \acronym{} tries to provide an
  % intermediate size. The letters were drawn from Linux Libertine, scaled,
  % weights adjusted, the placed in NovelDeco.otf.
  \gdef\acronym#1{{\decofont{#1}}}
  %
\fi% end \if@gotdeco
%
% Math font is not needed, because `novel' does not typeset math.
% If you have the Libertinus fonts installed, might as will specify for math.
% Then Latin Modern Math if installed.
% If not, NovelDeco.otf "fakes" math capability, just to fool the fontloader:
\IfFontExistsTF{Libertinus Math}{
  \setmathfont[BoldFont={libertinusmath-regular.otf}]{libertinusmath-regular.otf}
}{
  \IfFontExistsTF{Latin Modern Math}{}{% already set as default by unicode-math.
  }{
    \setmathfont[BoldFont={NovelDeco.otf}]{NovelDeco.otf}
  }
}%
% New in version 1.48:
\if@gotdeco
  \NewFontFace\decodropcapfont[RawFeature=+dcap]{\@decofontname}
\else
  \NewFontFace\decodropcapfont[\parentfontfeatures,Numbers=Lining]{\parentfontname}
\fi
\ifNDC@dropcapfontset\else
  \SetDropCapFont{\decodropcapfont}
\fi
%\ifNDC@dropcapcolorset\else
%  \SetDropCapColor{black} % default
%\fi
%
%% This provides default microtype settings, allows the user to over-ride,
%    and hopefully prevents the user from choosing inappropriate settings:
\let\microtypesetup\relax % fake command no longer needed
\if@setmicrotype % user wrote \microtypesetup{} in Preamble
  \IfSubStr{\@mymicrotypesetup}{config}{% user specified own config file
    \gdef\@mymicrotypeset{\@mymicrotypesetup}
  }{ % default to novel's config file
    \gdef\@mymicrotypeset{%
      config=novel-microtype,final,\@mymicrotypesetup}
  }
\else % user did not write \microtypesetup{} in Preamble
  \gdef\@mymicrotypeset{%
    config=novel-microtype,final,stretch=20,shrink=20}
\fi
\if@mtoff\else
  \RequirePackage[\@mymicrotypeset]{microtype}
\fi
%
%%



%
%% End of file `novel-FontDefaults.sty'


